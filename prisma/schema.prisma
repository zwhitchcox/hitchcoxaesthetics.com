// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(cuid())
  phone                String                @unique
  email                String?               @unique
  name                 String?
  type                 String                @default("client")
  dob                  DateTime?
  service              Service[]
  clientAppointments   Appointment[]         @relation("ClientAppointments")
  providerAppointments Appointment[]         @relation("ProviderAppointments")
  blockedTime          BlockedTime[]
  image                UserImage?
  notes                Note[]
  roles                Role[]
  sessions             Session[]
  connections          Connection[]
  location             GoogleLocation?       @relation(fields: [locationId], references: [id])
  locationId           String?
  address              Address?
  clientHistory        ClientHistoryRecord[]
  schedule             WeeklySchedule[]
  active               Boolean               @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id      String      @id @default(cuid())
  title   String
  content String
  images  NoteImage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client   User   @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  clientId String

  // non-unique foreign key
  @@index([clientId])
  // This helps our order by in the user search a LOT
  @@index([clientId, updatedAt])
}

model NoteImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  // non-unique foreign key
  @@index([noteId])
}

model Service {
  id           String        @id @default(cuid())
  title        String
  slug         String        @unique
  hint         String
  body         String?
  duration     Int // in minutes
  provider     User[]
  appointments Appointment[]
  order        Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id          String    @id @default(cuid())
  service     Service   @relation(fields: [serviceId], references: [id])
  start       DateTime? // actual appointment start time
  end         DateTime? // actual appointment end time
  windowStart DateTime // scheduled appointment start time
  windowEnd   DateTime // scheduled appointment end time
  notes       String?
  status      String    @default("Active")

  provider   User   @relation(name: "ProviderAppointments", fields: [providerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  providerId String
  client     User   @relation(name: "ClientAppointments", fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  clientId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  serviceId String
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model ClientHistoryForm {
  id     String               @id @default(cuid())
  name   String
  order  Float
  slug   String               @unique
  fields ClientHistoryField[]
}

model ClientHistoryField {
  id       String                     @id @default(cuid())
  slug     String                     @unique
  active   Boolean                    @default(true)
  prompt   String
  records  ClientHistoryRecord[]
  order    Float
  type     String
  required Boolean                    @default(false)
  options  ClientHistoryFieldOption[]
  form     ClientHistoryForm          @relation(fields: [formId], references: [id])
  formId   String
}

model ClientHistoryFieldOption {
  id             String                @id @default(cuid())
  value          String
  field          ClientHistoryField    @relation(fields: [fieldId], references: [id])
  fieldId        String
  historyRecords ClientHistoryRecord[]
  order          Float

  @@unique([fieldId, value])
}

model ClientHistoryRecord {
  id       String                     @id @default(cuid())
  answer   String?
  selected ClientHistoryFieldOption[]

  fieldId String
  field   ClientHistoryField @relation(fields: [fieldId], references: [id])
  userId  String
  user    User               @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, fieldId])
  @@index([userId, fieldId])
}

model GoogleLocation {
  id               String         @id
  name             String?
  formattedAddress String?
  addressLine1     String?
  addressLine2     String?
  apt              String?
  city             String?
  neighborhood     String?
  county           String?
  state            String?
  country          String?
  zip              String?
  zip4             String?
  lat              Float?
  lng              Float?
  url              String?
  json             String?
  users            User[]
  reviews          GoogleReview[]
  reviewStats      ReviewStats?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id           String  @id @default(cuid())
  addressLine1 String?
  addressLine2 String?
  city         String?
  county       String?
  state        String?
  zip          String?
  userId       String? @unique
  user         User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlockedTime {
  id         String   @id @default(cuid())
  providerId String
  start      DateTime
  end        DateTime
  reason     String
  provider   User     @relation(fields: [providerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WeeklySchedule {
  id        String   @id @default(cuid())
  dayOfWeek String
  startTime DateTime
  endTime   DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, dayOfWeek])
}

model GoogleReview {
  id              String   @id
  reviewId        String   @unique
  starRating      String // ONE, TWO, THREE, FOUR, FIVE
  comment         String?
  createTime      DateTime
  updateTime      DateTime
  profilePhotoUrl String?
  reviewerName    String

  // Reply data
  hasReply     Boolean   @default(false)
  replyComment String?
  replyTime    DateTime?

  locationId String
  location   GoogleLocation @relation(fields: [locationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([locationId])
  @@index([createTime])
}

model ReviewStats {
  id         String         @id @default(cuid())
  locationId String         @unique
  location   GoogleLocation @relation(fields: [locationId], references: [id])

  totalReviews  Int   @default(0)
  averageRating Float @default(0)

  // Rating distribution
  oneStarCount   Int @default(0)
  twoStarCount   Int @default(0)
  threeStarCount Int @default(0)
  fourStarCount  Int @default(0)
  fiveStarCount  Int @default(0)

  repliedCount   Int @default(0)
  unrepliedCount Int @default(0)

  // Monthly statistics stored as JSON
  monthlyReviews String? // JSON string of monthly review data

  lastUpdated DateTime @default(now())

  @@index([locationId])
}

model DailyStats {
  id         String       @id @default(cuid())
  date       String // ISO date string YYYY-MM-DD in Eastern Time
  revenue    Float        @default(0)
  profit     Float        @default(0)
  count      Int          @default(0)
  overhead   Float        @default(0)
  analysisId String
  analysis   AnalysisData @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@unique([date, analysisId])
  @@index([analysisId, date])
}

model CategorySummary {
  id         String       @id @default(cuid())
  category   String // laser, botox, filler, etc.
  count      Int          @default(0)
  revenue    Float        @default(0)
  profit     Float        @default(0)
  analysisId String
  analysis   AnalysisData @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@unique([category, analysisId])
  @@index([analysisId])
}

model AnalysisData {
  id                          String   @id @default(cuid())
  startDate                   String // ISO date string YYYY-MM-DD in Eastern Time
  endDate                     String // ISO date string YYYY-MM-DD in Eastern Time
  totalRevenue                Float    @default(0)
  totalProfit                 Float    @default(0)
  totalProfitMargin           Float    @default(0)
  totalOverhead               Float    @default(0)
  profitAfterOverhead         Float    @default(0)
  profitMarginAfterOverhead   Float    @default(0)
  totalAppointments           Int      @default(0)
  averageTransactionValue     Float    @default(0)
  averageProfitPerTransaction Float    @default(0)
  dailyOverhead               Float    @default(0)
  uniqueDays                  Int      @default(0)
  lastUpdated                 DateTime @default(now())

  dailyStats    DailyStats[]
  categoryStats CategorySummary[]

  @@index([startDate, endDate])
}
